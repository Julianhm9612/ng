import {AppError} from '@grid/core/infrastructure';
import {columnFactory} from '@grid/core/column/column.factory';
import {find} from '@grid/core/column/column.service';
import {generate} from '@grid/core/column-list';
import {Json} from '@grid/core/import/json';
import {Xml} from '@grid/core/import/xml';
import {Xlsx} from './xlsx';

const options = {
	pin: 'left',
	canEdit: false,
	canFocus: false,
	type: 'row-number'
};

function getType(name) {
	const dotDelimeter = /[.]/g.test(name);
	if (dotDelimeter) {
		let type = name.split('.');
		return type[type.length - 1];
	}
}

function extendColumn(columns, key, options) {
	const rowColumn = find(columns, key);
	if (rowColumn) {
		Object.assign(rowColumn, options);
	}
}

function readFile(e, file, model) {
	const data = e.target.result;
	const type = file.type === '' ? getType(file.name) : file.type;
	switch (type) {
		case 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': {
			const xlsx = new Xlsx();
			const rows = xlsx.read(data);
			const columns = generate(rows, columnFactory(model), false);
			extendColumn(columns, '__rowNum__', options);
			// __rowNum__ - default autogenerated column in xlxs output, but __rowNum__ prop is enumerable in rows objects
			model.data({
				columns: columns,
				rows: rows
			});
			break;
		}
		case 'text/json':
		case 'json': {
			const json = new Json();
			const rows = json.read(data);
			if (rows.length) {
				const columns = generate(rows, columnFactory(model), true);
				extendColumn(columns, 'rowNum', options);
				model.data({
					columns: columns,
					rows: rows
				});
			} else {
				throw new AppError('import', 'JSON for input should be an array of objects');
			}
			break;
		}
		case 'xml':
		case 'text/xml': {
			const xml = new Xml();
			console.log(xml.read(data));
			break;
		}
		default: {
			throw new AppError('import', `This is not valid file type ${getType(file)}`);
		}
	}
}

export {
	readFile
};