!function(t){function e(r){if(n[r])return n[r].exports;var o=n[r]={exports:{},id:r,loaded:!1};return t[r].call(o.exports,o,o.exports,e),o.loaded=!0,o.exports}var n={};return e.m=t,e.c=n,e.p="/scripts/",e(0)}([function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}var o=n(1),i=r(o);n(3),n(4),function(t){function e(t,e){t.when("/",{template:"qgrid demo page"}).when("/sandbox",{templateUrl:"sandbox/index.html",controller:i.default,controllerAs:"$ctrl"}),e.html5Mode(!1).hashPrefix("!")}function n(){}t.module("demo",["ngRoute","qgrid"]).config(e).controller("Demo.Controller",n),e.$inject=["$routeProvider","$locationProvider"],n.$inject=[]}(angular)},function(t,e){"use strict";function n(t){var e=this;e.rows=[],e.columns=[{key:"gender",title:"Gender"},{key:"birthday",title:"Birthday"},{key:"region",title:"Region"},{key:"memberSince",title:"Member Since"}],t.get("data/people/100.json").then(function(t){e.rows=t.data})}Object.defineProperty(e,"__esModule",{value:!0}),e.default=n,n.$inject=["$http"]},function(t,e){"use strict";function n(){}Object.defineProperty(e,"__esModule",{value:!0}),e.default={templateUrl:"qgrid.html",controller:n,bindings:{rows:"<",columns:"<"}},n.$inject=[]},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}var o=n(2),i=r(o);!function(t){function e(t){t.put("qgrid.html",n(6))}t.module("qgrid",[]).component("qGrid",i.default).run(e),e.$inject=["$templateCache"]}(angular)},function(t,e,n){"use strict";n(5),function(t){function e(){}t.module("qgrid").run(e),e.$inject=["$templateCache"]}(angular)},function(t,e){},function(t,e){t.exports='<div class="qgrid">\n\t<table>\n\t\t<thead>\n\t\t<tr>\n\t\t\t<th ng-repeat="$column in $ctrl.columns track by $index">\n\t\t\t\t<label>{{$column.title}}</label>\n\t\t\t</th>\n\t\t</tr>\n\t\t</thead>\n\t\t<tbody>\n\t\t<tr ng-repeat="$row in $ctrl.rows">\n\t\t\t<td ng-repeat="$column in $ctrl.columns track by $index">\n\t\t\t\t{{$row[$column.key]}}\n\t\t\t</td>\n\t\t</tr>\n\t\t</tbody>\n\t\t<tfoot>\n\t\t</tfoot>\n\t</table>\n</div>'}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,